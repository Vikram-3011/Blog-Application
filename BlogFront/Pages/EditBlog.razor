@page "/edit-blog/{Id:guid}"
@inject BlogService BlogService
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@using BlogFront.Models
@using MudBlazor
@using System.Text.RegularExpressions
@using System.Net
@inject UserStateManager UserState



<MudContainer MaxWidth="MaxWidth.Large" Class="py-8 px-4">
    @if (blog == null)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else
    {
        <MudPaper Class="edit-card mx-auto" Elevation="14">
            <MudText Typo="Typo.h5" Class="mb-4 font-serif font-bold" Style="color:black;">
                Edit Your Blog
            </MudText>

            <EditForm Model="blog" OnValidSubmit="HandleUpdate">

                <DataAnnotationsValidator />
                <ValidationSummary />

                <MudTextField @bind-Value="blog.Title"
                              Variant="Variant.Outlined"
                              Label="Title" Required Class="mb-3" />
                <MudTextField @bind-Value="blog.Description"
                              Variant="Variant.Outlined"
                              Label="Description" Required Class="mb-4" />

                
                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center" Class="rte-toolbar">
                    <MudIconButton Icon="@Icons.Material.Filled.FormatBold"
                                   Title="Bold"
                                   OnClick="@(async () => await ApplyFormatAsync("**", "**"))" />
                    <MudIconButton Icon="@Icons.Material.Filled.FormatItalic"
                                   Title="Italic"
                                   OnClick="@(async () => await ApplyFormatAsync("*", "*"))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Link"
                                   Title="Link"
                                   OnClick="@(async () => await InsertLinkAsync())" />
                </MudStack>


                <div class="editor-container">
                    <textarea id="contentBox"
                              @bind="contentMarkup"
                              @bind:event="oninput"
                              class="edit-textarea"></textarea>

                    <div class="preview-pane">
                        @((MarkupString)ConvertSimpleMarkup(contentMarkup))
                    </div>
                </div>

                <MudButton Color="Color.Primary" Variant="Variant.Filled"
                           Type="Submit" FullWidth Class="mt-4" OnClick="HandleUpdate">
                    Update Blog
                </MudButton>
            </EditForm>
        </MudPaper>
    }
</MudContainer>

<style>
    .edit-card {
        backdrop-filter: blur(12px);
        background-color: rgba(255,255,255,0.9);
        border-radius: 12px;
        padding: 2rem;
    }

    .editor-container {
        display: flex;
        gap: 1rem;
    }

    .edit-textarea {
        flex: 1;
        min-height: 300px;
        resize: none;
        padding: 0.75rem;
        font-family: inherit;
        border: 1px solid #ccc;
        border-radius: 6px;
    }

    .preview-pane {
        flex: 1;
        padding: 0.75rem;
        background: #f5f5f5;
        border-radius: 6px;
        overflow: auto;
        max-height: 300px;
    }

    .rte-toolbar {
        gap: .5rem;
    }
</style>

@code {
    [Parameter] public Guid Id { get; set; }

    private BlogPost? blog;
    private string contentMarkup = "";   

    protected override async Task OnInitializedAsync()
    {
        blog = await BlogService.GetBlogByIdAsync(Id);
        if (blog != null)
        {
            blog.Id = Id;
            contentMarkup = ConvertHtmlToSimpleMarkup(blog.Content);
        }

        if (blog is null) return;

      
        contentMarkup = ConvertHtmlToSimpleMarkup(blog.Content);
    }

    private async Task HandleUpdate()
    {
        if (blog is null) return;

        blog.Content = ConvertSimpleMarkup(contentMarkup);  

        var error = await BlogService.UpdateBlogAsync(blog, UserState.UserEmail);
        if (error == null)
        {
            Snackbar.Add("Blog updated successfully!", Severity.Success);
            Nav.NavigateTo($"/blog/{blog.Id}");
        }
        else
        {
            Snackbar.Add($"Error updating blog: {error}", Severity.Error);
        }
    }

    [Inject] IJSRuntime JS { get; set; } = default!;
    private Task ApplyFormatAsync(string p, string s) =>
        JS.InvokeVoidAsync("insertAround", "contentBox", p, s, false).AsTask();
    private Task InsertLinkAsync() =>
        JS.InvokeVoidAsync("insertAround", "contentBox", "[", "](https://)", true).AsTask();


    private static string ConvertSimpleMarkup(string? input)
    {
        if (string.IsNullOrWhiteSpace(input)) return string.Empty;

        var html = WebUtility.HtmlEncode(input);

        html = Regex.Replace(html, @"\*\*(.+?)\*\*", "<strong>$1</strong>");
        html = Regex.Replace(html,
            @"(?<!\*)\*(?!\*)(.+?)(?<!\*)\*(?!\*)", "<em>$1</em>",
            RegexOptions.Singleline);

        html = Regex.Replace(html, @"\[(.+?)\]\((.+?)\)",
            "<a href=\"$2\" target=\"_blank\" rel=\"noopener\">$1</a>",
            RegexOptions.Singleline);

        return html.Replace("\r\n", "\n").Replace("\n", "<br>");
    }

    private static string ConvertHtmlToSimpleMarkup(string? html)
    {
        if (string.IsNullOrWhiteSpace(html)) return string.Empty;

       
        html = html.Replace("<br>", "\n").Replace("<br/>", "\n").Replace("<br />", "\n");

        
        html = Regex.Replace(html, @"<strong>(.+?)<\/strong>", "**$1**", RegexOptions.Singleline | RegexOptions.IgnoreCase);
        html = Regex.Replace(html, @"<em>(.+?)<\/em>", "*$1*", RegexOptions.Singleline | RegexOptions.IgnoreCase);

        html = Regex.Replace(html,
            @"<a[^>]+href\s*=\s*[""'](?<url>[^""']+)[""'][^>]*>(?<text>.*?)<\/a>",
            "[$2]($1)", RegexOptions.Singleline | RegexOptions.IgnoreCase);

        return WebUtility.HtmlDecode(Regex.Replace(html, @"<[^>]+>", ""));
    }
}
<script>

     
    window.insertAround = function (elementId, prefix, suffix, placeCursorInMiddle) {
        const el = document.getElementById(elementId);
        if (!el) return;

        const start = el.selectionStart;
        const end = el.selectionEnd;
        const selectedText = el.value.substring(start, end);

        let newText = prefix + selectedText + suffix;

        
        el.setRangeText(newText, start, end, 'end');

      
        if (placeCursorInMiddle && selectedText.length === 0) {
            const pos = start + prefix.length;
            el.setSelectionRange(pos, pos);
        }
        el.dispatchEvent(new Event('input'));
    };

</script>