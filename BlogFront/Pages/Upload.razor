@page "/upload"
@inject NavigationManager Nav
@inject UserStateManager UserState
@inject ProfileService ProfileService
@using BlogFront.Models
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS
@using System.Text.RegularExpressions
@using System.Net



<div class="upload-background"></div>

<MudContainer Class="upload-wrapper">
    <MudPaper Elevation="12" Class="upload-card">
        <MudText Typo="Typo.h5" Align="Align.Center"
                 Class="font-serif mb-4 text-accent">
            Start Writing Your Blog
        </MudText>

        <div class="editor-container">
           
            <div class="editor-pane left-pane">
                <EditForm EditContext="editContext">
                    <DataAnnotationsValidator />

                    <div class="form-content">
                        <MudStack Spacing="2">

                           
                            <MudTextField @bind-Value="blog.Title"
                                          Label="Blog Title"
                                          Variant="Variant.Outlined"
                                          Required="true" />
                            <ValidationMessage For="@(() => blog.Title)" />

                          
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center" Class="rte-toolbar">
                                <MudIconButton Icon="@Icons.Material.Filled.FormatBold"
                                               Title="Bold"
                                               OnClick="@(async () => await ApplyFormatAsync("**", "**"))" />
                                <MudIconButton Icon="@Icons.Material.Filled.FormatItalic"
                                               Title="Italic"
                                               OnClick="@(async () => await ApplyFormatAsync("*", "*"))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Link"
                                               Title="Link"
                                               OnClick="@(async () => await InsertLinkAsync())" />
                            </MudStack>

                           
                        <textarea id="contentBox"
                          @bind="blog.Content" @bind:event="oninput" required
                                      style="flex-grow: 1;"></textarea>

                            <ValidationMessage For="@(() => blog.Content)" />
                                </MudStack>
                    </div>

                    <div class="form-footer">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   OnClick="GoToDetails"
                                   FullWidth>
                            NEXT
                        </MudButton>
                    </div>
                </EditForm>
            </div>

           
            <div class="resizer"></div>

           
            <div class="editor-pane right-pane">
                <h2>@blog.Title</h2>
                <div style="white-space: pre-wrap;">
                    @((MarkupString)ConvertSimpleMarkup(blog.Content))
                </div>
            </div>          

        </div>         

       
    </MudPaper>
</MudContainer>

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .rte-toolbar {
        flex-direction: row !important; 
        gap: 0.5rem; 
    }
    .upload-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-image: url('/Images/tech 7.jpg');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        z-index: -1;
    }

    .upload-wrapper {
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        box-sizing: border-box;
    }

    .upload-card {
        background: rgba(255, 255, 255, 0.85);
        backdrop-filter: blur(4px);
        border-radius: 10px;
        padding: 1.5rem;
        width: 100%;
        max-width: 1300px;
        height: 87%;
        overflow: hidden;
    }

    .editor-container {
        display: flex;
        height: calc(100% - 3rem); 
        overflow: hidden;
    }

    .editor-pane {
        padding: 1rem;
        height: 100%;
        overflow-y: auto;
        box-sizing: border-box;
    }

    .left-pane {
        flex: 0 0 55%;
        background-color: rgba(255, 255, 255, 0.95);
        border-radius: 8px 0 0 8px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 1rem;
        height: 100%;
        box-sizing: border-box;
    }

    .form-content {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        padding-right: 0.5rem;
    }

    .form-footer {
        padding-top: 10;
    }


    .right-pane {
        flex: 1;
        background-color: #f5f5f5;
        border-left: 1px solid #ddd;
        overflow-y: auto;
        border-radius: 0 8px 8px 0;
        padding: 1rem;
        font-family: 'Segoe UI', sans-serif;
        white-space: pre-wrap;
    }


    .resizer {
        width: 5px;
        cursor: col-resize;
        background-color: #888;
        user-select: none;
        width: 5px;
        cursor: col-resize;
        background: #888;
    }

    .font-serif {
        font-family: 'Georgia', serif;
    }

    .text-accent {
        color: #c3bff7;
    }

    textarea#contentBox {
        flex-grow: 1;
        width: 100%;
        min-height: 250px;
        padding: 0.75rem;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-family: inherit;
        resize: none;
        box-sizing: border-box;
        margin-top: 10px; 
    }

</style>

@code {
    private BlogPost blog = new();
    private EditContext? editContext;

    
    private readonly Dictionary<string, object> contentBoxAttrs =
        new() {
            { "id",    "contentBox" },
            { "style", "min-height:250px;" }
            };

    protected override void OnInitialized()
        => editContext = new EditContext(blog);

    
    private Task ApplyFormatAsync(string p, string s) =>
        JS.InvokeVoidAsync("insertAround", "contentBox", p, s, false).AsTask();

    private Task InsertLinkAsync() =>
        JS.InvokeVoidAsync("insertAround", "contentBox",
                           "[", "](https://)", true).AsTask();

    
   private async Task GoToDetails()
{
    if (editContext is null || !editContext.Validate()) return;

    var prof = await ProfileService.GetProfileAsync(UserState.UserEmail);
    blog.Author = prof?.Name ?? "Unknown";
    blog.AuthorEmail = UserState.UserEmail;

   
    Nav.NavigateTo($"/upload-details?title={Uri.EscapeDataString(blog.Title)}" +
                   $"&content={Uri.EscapeDataString(blog.Content)}"); 
}


    private static string ConvertSimpleMarkup(string? input)
    {
        if (string.IsNullOrWhiteSpace(input)) return string.Empty;

        var html = WebUtility.HtmlEncode(input);

       
        html = Regex.Replace(html, @"\*\*(.+?)\*\*", "<strong>$1</strong>");

      
        html = Regex.Replace(html,
            @"(?<!\*)\*(?!\*)(.+?)(?<!\*)\*(?!\*)", 
            "<em>$1</em>", RegexOptions.Singleline);

       
        html = Regex.Replace(html, @"\[(.+?)\]\((.+?)\)",
            "<a href=\"$2\" target=\"_blank\" rel=\"noopener\">$1</a>",
            RegexOptions.Singleline);

        return html.Replace("\r\n", "\n").Replace("\n", "<br>");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initResize"); 
        }
    }
}
<script>
    window.initResize = function () {
        const resizer = document.querySelector('.resizer');
        const left = resizer.previousElementSibling;
        const right = resizer.nextElementSibling;

        let x = 0;
        let leftWidth = 0;

        const mouseDownHandler = function (e) {
            x = e.clientX;
            leftWidth = left.getBoundingClientRect().width;

            document.addEventListener('mousemove', mouseMoveHandler);
            document.addEventListener('mouseup', mouseUpHandler);
        };

        const mouseMoveHandler = function (e) {
            const dx = e.clientX - x;
            const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;
            left.style.flex = `0 0 ${newLeftWidth}%`;
        };

        const mouseUpHandler = function () {
            document.removeEventListener('mousemove', mouseMoveHandler);
            document.removeEventListener('mouseup', mouseUpHandler);
        };

        resizer.addEventListener('mousedown', mouseDownHandler);
    };

    window.insertAround = function (id, pre, suf, isLink) {
        const el = document.getElementById(id);
        if (!el) return;

        const start = el.selectionStart, end = el.selectionEnd;
        const sel   = el.value.substring(start, end);
        const txt   = isLink && !sel ? "link text" : sel;

        el.setRangeText(pre + txt + suf, start, end, "end");

        if (isLink && !sel) {
            const p = start + 1;
            el.setSelectionRange(p, p + 9);   
        }
        el.dispatchEvent(new Event('input', { bubbles: true }));
        el.focus();
    };
</script>
