@page "/admin-management"
@inject AdminServiceFront AdminService
@inject UserStateManager UserState
@inject NavigationManager Nav
@inject ISnackbar Snackbar   
@using BlogUser = BlogFront.Models.User
@using MudBlazor
@inject BlogService BlogService

<div class="home-background"></div>

@if (!checkedAdmin)
{
    <MudProgressCircular Indeterminate="true" />
    return;
}

@if (!UserState.IsAdmin)
{
    <MudText Typo="Typo.h6">You are not authorized to view this page.</MudText>
    return;
}

<MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AdminPanelSettings"
           OnClick="@(() => Nav.NavigateTo("/manage-admins"))">
    Admin Management
</MudButton>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-10 page-container">
    <MudPaper Class="p-8 glassmorphism mb-12" Elevation="12" Style="border-radius: 20px;">

        <MudText Typo="Typo.h4" Class="font-bold text-center mt-4 mb-6"> User Blog Search</MudText>

        <MudGrid>
            <MudItem xs="12" sm="10">
                <MudTextField Class="ml-15 mr-10 mb-1 mt-7" @bind-Value="searchTerm"
                              Label="Search by email or name"
                              Variant="Variant.Outlined"
                              Immediate="true"
                              OnKeyUp="HandleSearchKey"
                               />
            </MudItem>
            <MudItem xs="12" sm="2">
                <MudButton StartIcon="@Icons.Material.Filled.Search"
                           Color="Color.Primary"
                           Variant="Variant.Text"
                           OnClick="SearchBlogs" Class="mt-7 mr-3"
                           Style="margin-top: 5px; width: 100%;">
                    Search
                </MudButton>
            </MudItem>
        </MudGrid>


        @if (isSearching)
        {
            <MudProgressCircular Indeterminate="true" Class="mt-4" />
        }
        else if (searchedBlogs is not null && searchedBlogs.Any())
        {
            <MudList T="BlogPost" Class="mt-4">
                @foreach (var blog in searchedBlogs.OrderByDescending(b => b.CreatedAt))
                {
                    <MudListItem @onclick="() => NavigateToBlog(blog.Id)" Style="cursor: pointer;">
                        <MudListItemText>
                            <MudText Typo="Typo.subtitle1">@blog.Title</MudText>
                            <MudText Typo="Typo.caption">@blog.Description</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                @blog.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy")
                            </MudText>
                        </MudListItemText>
                    </MudListItem>
                }
            </MudList>
        }
        else if (searchedBlogs != null)
        {
            Snackbar.Add("No blogs found for this user.", Severity.Error);
        }
    </MudPaper>
</MudContainer>

<style>
    .glassmorphism {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .home-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-image: url('/Images/tech 7.jpg');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        z-index: -1;
    }

    .page-container {
        padding-bottom: 100px;
    }
    .font-serif {
        font-family: 'Georgia', serif;
    }
</style>


@code {
    private bool checkedAdmin;
    private string searchTerm = "";
    private List<BlogPost>? searchedBlogs;
    private bool isSearching = false;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(UserState.UserEmail))
        {
            Snackbar.Add("Please log in to continue.", Severity.Error);
            Nav.NavigateTo("/login");
            return;
        }

        var email = UserState.UserEmail.ToLower();
        bool isAdmin = await AdminService.IsAdmin(email);
        bool isSuper = await AdminService.IsSuperAdmin(email);

        UserState.SetUser(new BlogUser(UserState.UserEmail)
        {
            Name = UserState.UserName,
            IsAdmin = isAdmin,
            IsSuperAdmin = isSuper
        });

        checkedAdmin = true;

        if (!isAdmin)
            Nav.NavigateTo("/unauthorized");
    }

    private async Task HandleSearchKey(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !string.IsNullOrWhiteSpace(searchTerm))
        {
            await SearchUserBlogs();
        }
    }

    private async Task SearchBlogs()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            Snackbar.Add("Please enter a search term.", Severity.Warning);
            return;
        }

        await SearchUserBlogs();
    }

    private async Task SearchUserBlogs()
    {
        isSearching = true;
        searchedBlogs = null;

        try
        {
            var allBlogs = await BlogService.GetBlogsAsync();

            searchedBlogs = allBlogs
                .Where(b => (!string.IsNullOrWhiteSpace(b.AuthorEmail) && b.AuthorEmail.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                            (!string.IsNullOrWhiteSpace(b.Author) && b.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                .ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error fetching user blogs: " + ex.Message, Severity.Error);
        }

        isSearching = false;
        StateHasChanged();
    }

    private void NavigateToBlog(Guid blogId)
    {
        Nav.NavigateTo($"/blog/{blogId}");
    }
}
