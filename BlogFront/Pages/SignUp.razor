@page "/signup"
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@using MudBlazor
@using BlogFront.Services
@using Microsoft.AspNetCore.Components.Web
@inject ISnackbar Snackbar
@inject ProfileService ProfileSvc
@using BlogFront.Models

<div class="login-background"></div>

<div class="login-wrapper">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudCard Class="login-card">
            <MudCardHeader>
                <MudText Typo="Typo.h4" Align="Align.Center">Create Account</MudText>
            </MudCardHeader>


            <MudCardContent>
                <MudTextField @bind-Value="name"  Label="Name"  Required
              Variant="Variant.Outlined" Class="white-input mb-3" />

                <MudTextField T="string"
                              @bind-Value="email"
                              Label="Email"
                              Variant="MudBlazor.Variant.Outlined"
                              Class="white-input mb-3"
                              Required
                              OnKeyDown="HandleKeyDown" />

                <MudTextField T="string"
                              @bind-Value="password"
                              Label="Password"
                              Variant="MudBlazor.Variant.Outlined"
                              InputType="@passwordInputType"
                              Required
                              Class="white-input"
                              Adornment="Adornment.End"
                              AdornmentIcon="@passwordIcon"
                              OnAdornmentClick="TogglePasswordVisibility"
                              OnKeyDown="HandleKeyDown" />

                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <MudText Color="Color.Error" Class="mt-2">@errorMessage</MudText>
                }

                <MudButton OnClick="HandleSignUp"
                           Variant="MudBlazor.Variant.Filled"
                           Color="Color.Primary"
                           Class="mt-4"
                           FullWidth>
                    Sign Up
                </MudButton>

                <MudText Class="mt-3 text-center">
                    Already have an account?
                    <MudLink Href="/" Class="ml-1">Login</MudLink>
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudContainer>
</div>

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .login-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-image: url('/Images/tech14.jpg'); /* update if renamed */
        background-size: cover;
        background-position: center;
        z-index: -1;
    }

    .login-wrapper {
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .login-card {
        padding: 24px;
        border-radius: 20px;
        backdrop-filter: blur(10px);
        background-color: rgba(0, 0, 0, 0.4);
        color: white;
    }

    /* Force white text, borders, labels, icons */
    .white-input .mud-input,
    .white-input input,
    .white-input .mud-input-label,
    .white-input .mud-icon-root {
        color: white !important;
        border-color: white !important;
    }

    .white-input .mud-input-slot {
        color: white !important;
    }

</style>

@code {
    private string name = "";
    private string email = "";
    private string password = "";
    private string? errorMessage;

    private InputType passwordInputType = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (passwordInputType == InputType.Password)
        {
            passwordInputType = InputType.Text;
            passwordIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            passwordInputType = InputType.Password;
            passwordIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleSignUp();
        }
    }

    private async Task HandleSignUp()
    {
        var err = await AuthService.SignUp(email, password);
        if (err is not null) return;

        var profile = new UserProfile { Email = email, Name = name };   // UserProfile now resolves
        await ProfileSvc.SaveProfileAsync(profile);

        Snackbar.Add("Account created! Please log in.", Severity.Success);
        NavigationManager.NavigateTo("/");
    }
}
