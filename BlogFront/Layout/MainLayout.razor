@inherits LayoutComponentBase
@using MudBlazor
@inject UserStateManager userState
@inject AuthService authService
@inject IJSRuntime JSRuntime
@inject NavigationManager Nav

<MudThemeProvider IsDarkMode="@isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Class="px-4" Style="background-color: transparent;">
        <div class="d-flex justify-between align-center w-100">

            @if (userState.IsLoggedIn())
            {
                <div class="d-flex align-center">
                    <MudTooltip Text="Menu">
                        <MudIconButton Icon="@Icons.Material.Filled.List" style="color:black;" OnClick="@ToggleDrawer" />
                    </MudTooltip>
                </div>
            }
            else
            {
                <div style="cursor: pointer;" @onclick="NavigateToCorrectPage">
                    <MudText Typo="Typo.h5" Class="@($"medium-title {GetTextColorClass()}")">
                        BLOG APP
                    </MudText>
                </div>
            }

            <div class="d-flex align-center" style="gap: 8px; margin-left: auto;">

                @if (userState.IsLoggedIn())
                {
                    <!-- Write button -->
                    <MudButton Variant="Variant.Filled" Color="Color.Info"
                               OnClick="@(() => Nav.NavigateTo("/upload"))">
                        Write
                    </MudButton>

                    <!-- Profile button -->
                    <MudTooltip Text="Profile">
                        <MudIconButton Icon="@Icons.Material.Filled.AccountCircle"
                                       Color="Color.Secondary"
                                       OnClick="@ToggleOpen" />
                    </MudTooltip>
                }
                else
                {
                    <!-- Login button -->
                    <MudButton OnClick="@(() => Nav.NavigateTo("/"))"
                               Color="Color.Secondary"
                               Variant="Variant.Text"
                               StartIcon="@Icons.Material.Filled.Login">
                        Login
                    </MudButton>
                }
            </div>
        </div>
    </MudAppBar>

    <!-- Profile Popover -->
    <MudPopover Open="@_open" Fixed="true" AnchorOrigin="Origin.TopRight"
                TransformOrigin="Origin.TopRight" Class="px-4 pt-7 profile-popover"
                OnClose="@ClosePopover">
        <div class="d-flex flex-column">
            @if (userState.IsLoggedIn())
            {
                <MudText Typo="Typo.h6" Class="mb-4">@userState.UserName</MudText>
                <MudText Typo="Typo.body2">@userState.User?.Email</MudText>
                <MudDivider Class="my-2" />

                <MudButton OnClick="@(() => NavigateTo("/profile"))"
                           Variant="Variant.Text" FullWidth="true">Profile</MudButton>

                <MudButton OnClick="Logout"
                           StartIcon="@Icons.Material.Filled.Logout"
                           Variant="Variant.Text" Color="Color.Error"
                           FullWidth="true">Logout</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Login" Href="/">Login</MudButton>
            }
        </div>
    </MudPopover>

    <!-- Side Drawer -->
    <MudDrawer Open="@isOpen" Variant="DrawerVariant.Persistent" Class="@NavMenuCss">
        <MudDrawerHeader>
            <MudButton Typo="Typo.h4" OnClick="@(() => NavigateTo("/home"))" Class="medium-title">Blog App</MudButton>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>

    <!-- Main Content -->
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<style>
    .medium-title {
        font-family: 'Georgia', 'Times New Roman', serif;
        font-weight: 700;
        font-size: 32px;
        line-height: 1.2;
        letter-spacing: -0.5px;
        color: #121212;
    }

    .profile-popover {
        margin-top: 50px;
    }

    .navmenu-profile {
        background-color: #e6e6e6;
    }

    .navmenu-default {
        background-color: #ffffff;
    }
</style>

@code {
    private bool isOpen = false;
    private bool isDarkMode = false;
    private bool _open;

    private void ToggleDarkMode() => isDarkMode = !isDarkMode;
    private void ToggleDrawer() => isOpen = !isOpen;

    private void NavigateToCorrectPage()
    {
        if (userState.IsLoggedIn())
            Nav.NavigateTo("/home");
        else
            Nav.NavigateTo("/");
    }

    private string GetTextColorClass() => "black-text";

    private void NavigateTo(string route)
    {
        _open = false;
        Nav.NavigateTo(route);
    }

    public async void Logout()
    {
        try
        {
            await authService.SignOut();
            userState.ClearUser();    // ✅ Clear user info
            StateHasChanged();        // ✅ Force re-render
            Nav.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout Error: {ex.Message}");
        }
    }

    private void ClosePopover()
    {
        _open = false;
        StateHasChanged();
    }

    private void ToggleOpen()
    {
        _open = !_open;
        StateHasChanged();
    }

    private string NavMenuCss =>
        Nav.ToBaseRelativePath(Nav.Uri).ToLowerInvariant().StartsWith("profile")
            ? "navmenu-profile" : "navmenu-default";
}
